{"version":3,"sources":["Components/HomeText.jsx","Components/AboutText.jsx","Components/ContactText.jsx","Components/HeaderText.jsx","Components/HomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["HomeText","react_default","a","createElement","className","href","Component","AboutText","ContactText","HeaderText","state","display","handleClick","event","_this","setState","target","name","displayText","this","Components_HomeText","Components_AboutText","Components_ContactText","onClick","about","contact","HomePage","Components_HeaderText","App","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAuBeA,0LAlBX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,4BACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAY,eAAf,2EAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACdH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,mCACPJ,EAAAC,EAAAC,cAAA,UAAQC,UAAY,iBAApB,6BAVaE,cCkBRC,mLAhBX,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAY,cAAf,oKAEAH,EAAAC,EAAAC,cAAA,2LAEAF,EAAAC,EAAAC,cAAA,+OATcG,aCaTE,mLAZX,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,oBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAY,SAAf,qCACAH,EAAAC,EAAAC,cAAA,6CAPgBG,aC6CXG,6MAxCbC,MAAQ,CACNC,QAAS,UAGXC,YAAc,SAACC,GACbC,EAAKC,SAAS,CAAEJ,QAASE,EAAMG,OAAOC,gFAKtC,IAAIC,EACJ,OAAOC,KAAKT,MAAMC,SAChB,IAAK,OAAQO,EAAcjB,EAAAC,EAAAC,cAACiB,EAAD,MAC3B,MACA,IAAK,QAASF,EAAcjB,EAAAC,EAAAC,cAACkB,EAAD,MAC5B,MACA,IAAK,UAAWH,EAAcjB,EAAAC,EAAAC,cAACmB,EAAD,MAC9B,MACA,QAASJ,EAAcjB,EAAAC,EAAAC,cAACiB,EAAD,MAEzB,OACEnB,EAAAC,EAAAC,cAAA,iBACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQoB,QAASJ,KAAKP,YAAaK,KAAK,OAAMb,UAAU,gBAE1DH,EAAAC,EAAAC,cAAA,OAAKqB,OAAK,EAACpB,UAAU,eACnBH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,eAAekB,QAASJ,KAAKP,YAAaK,KAAK,QAAQb,UAAU,MAAzE,UAEFH,EAAAC,EAAAC,cAAA,OAAKsB,SAAO,EAACrB,UAAU,iBACrBH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,eAAekB,QAASJ,KAAKP,YAAaK,KAAK,UAAUb,UAAU,MAA3E,aAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdc,UApCgBZ,aCYVoB,mLATX,OACEzB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBALAE,aCQRsB,mLALX,OACE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAaN,WAHzBpB,aCKE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAQC,SAAUC,gBAAwBzC,EAAAC,EAAAC,cAACwC,EAAD,OAAkBC,SAASC,eAAe,cD0H9F,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a7b21c35.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./styles.css\"\n\nclass HomeText extends Component {\n  render() {\n    return (\n      <div>\n        <div className='textBox'>\n          <h1 className='okiText'> Oki: Singing on the Go </h1>\n          <p className = 'description'> Soundproof karaoke boxes in shopping malls, airports, bars, and more.</p>\n        </div>\n        <div className='requestButtonDiv'>\n         <a href='mailto:inquiries@okikaraoke.com'>\n          <button className = 'requestButton'>\n            Request a Booth\n          </button>\n          </a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default HomeText;\n","import React, { Component } from 'react';\nimport \"./styles.css\"\n\nclass AboutText extends Component {\n  render() {\n    return (\n      <div>\n        <div className='textBox2'>\n          <p className = 'convenient'> As UC Berkeley students, we had very limited karaoke options. We want to provide a space\n           that is convenient and private where anyone can sing their hearts out.</p>\n          <p>Since first launch in 2016, mini karaoke bars have become a multi-billion dollar market in China,\n          with 100,000 boxes installed by 2018 and 400+ more being installed each day.</p>\n          <p> Our original model (pictured) is currently being manufactured in China, and will arrive in May. We are currently negotiating an\n           installation and partnership contract with Westfield Mall in San Francisco and Oakridge.\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default AboutText;\n","import React, { Component } from 'react';\n\nclass ContactText extends Component {\n  render() {\n    return (\n      <div>\n        <div className='textBox3'>\n          <h1 className='okiText'> Any questions? </h1>\n          <p className = 'email'> E-mail: inquiries@okikaraoke.com</p>\n          <p> Phone: +1 888 888 8888</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ContactText;\n","import React, { Component } from 'react';\nimport HomeText from './HomeText.jsx';\nimport AboutText from './AboutText.jsx';\nimport ContactText from './ContactText.jsx';\n\nclass HeaderText extends Component {\n\n  state = {\n    display: 'home'\n  }\n\n  handleClick = (event) => {\n    this.setState({ display: event.target.name });\n  }\n\n\n  render() {\n    var displayText;\n    switch(this.state.display) {\n      case 'home': displayText = <HomeText/>;\n      break;\n      case 'about': displayText = <AboutText/>;\n      break;\n      case 'contact': displayText = <ContactText/>;\n      break;\n      default: displayText = <HomeText/>;\n    }\n    return (\n      <container>\n        <div className='header'>\n          <div className='iconDiv'>\n            <button onClick={this.handleClick} name='home'className='iconButton'/>\n          </div>\n          <div about className='aboutButton'>\n            <a href=\"javascript:;\" onClick={this.handleClick} name='about' className='a2'>About</a>\n          </div>\n          <div contact className='contactButton'>\n            <a href=\"javascript:;\" onClick={this.handleClick} name='contact' className='a2'>Contact</a>\n          </div>\n        </div>\n        <div className='headerDivider'/>\n        {displayText}\n      </container>\n    )\n  }\n}\n\nexport default HeaderText;\n","import React, { Component } from 'react';\n//import PictureCarousel from './PictureCarousel.jsx';\n//import { Carousel } from 'react-responsive-carousel';\nimport \"./styles.css\"\nimport HeaderText from \"./HeaderText.jsx\";\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <body className='body'>\n        <HeaderText/>\n        <div className='slider'/>\n      </body>\n    )\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport { browserHistory } from 'react-router';\nimport HomePage from './Components/HomePage';\nimport AboutText from './Components/AboutText';\nimport \"./index.css\"\n\nclass App extends Component {\n  render() {\n    return (\n      <Route exact path = '/' component = {HomePage}/>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}